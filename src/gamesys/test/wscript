import Task, TaskGen
from TaskGen import extension, declare_extension

def create_simple_protoc_task(name, ext, compiled_ext, type, before, shell = True, color = 'PINK'):
    def create(self, node):
        task = self.create_task(name)
        task.set_inputs(node)
        out = node.change_ext(compiled_ext)
        task.set_outputs(out)

    cmd = 'protoc --encode=%s -I ../src/gamesys/test ../src/gamesys/test/test_resource_ddf.proto < ${SRC} > ${TGT}' % type 
    Task.simple_task_type(name, cmd, before=before, shell=shell, color=color) 
    declare_extension([ext], create)

create_simple_protoc_task('aresource', '.a_pb', '.a', 'TestResource.AResource', before='cc cxx')
create_simple_protoc_task('bresource', '.b_pb', '.b', 'TestResource.BResource', before='cc cxx')
create_simple_protoc_task('cresource', '.c_pb', '.c', 'TestResource.CResource', before='cc cxx')
create_simple_protoc_task('testresourcecont', '.cont_pb', '.cont', 'TestResource.ResourceContainerDesc', before='cc cxx')
create_simple_protoc_task('physcomp', '.pc_pb', '.pc', 'TestResource.PhysComponent', before='cc cxx')
create_simple_protoc_task('resourcefoo', '.foo_pb', '.foo', 'TestResource.ResourceFoo', before='cc cxx')

Task.simple_task_type('gameobjectdesc', 'protoc --encode=dmGameObject.PrototypeDesc -I ../proto ../proto/gameobject_ddf.proto < ${SRC} > ${TGT}',
                      color='PINK', 
                      before='cc cxx',
                      shell=True)

@extension('.go_pb')
def testresourcecont_file(self, node):
    obj_ext = '.go'
    task = self.create_task('gameobjectdesc')
    task.set_inputs(node)
    out = node.change_ext(obj_ext)
    task.set_outputs(out)

Task.simple_task_type('luascript', 'cat < ${SRC} > ${TGT}',
                      color='PINK', 
                      before='cc cxx',
                      shell=True)

@extension('.script')
def testresourcecont_file(self, node):
    obj_ext = '.scriptc'
    task = self.create_task('luascript')
    task.set_inputs(node)
    out = node.change_ext(obj_ext)
    task.set_outputs(out)

def build(bld):
    resources = bld.new_task_gen(source = 'test.cont_pb')
    
    test_resource = bld.new_task_gen(features = 'cxx cprogram',
                                     includes = '../../../src',
                                     uselib = 'GTEST DDF DLIB',
                                     uselib_local = 'gamesys lua',
                                     proto_gen_py = True,
                                     target = 'test_resource',
                                     source = 'test_resource.cpp test_resource_ddf.proto test.cont_pb test01.foo_pb test02.foo_pb')

    test_resource.install_path = None

    test_gameobject = bld.new_task_gen(features = 'cxx cprogram',
                                     includes = '../../../src',
                                     uselib = 'GTEST DDF DLIB',
                                     uselib_local = 'gamesys lua',
                                     proto_gen_py = True,
                                     target = 'test_gameobject',
                                     source = 'test_gameobject.cpp test_resource_ddf.proto')
    test_gameobject.find_sources_in_dirs('.', exts = ['.go_pb', '.pc_pb', '.script', '.a_pb', '.b_pb', '.c_pb'])
    test_gameobject.install_path = None

    test_script = bld.new_task_gen(features = 'cxx cprogram',
                                     includes = '../../../src',
                                     uselib = 'GTEST DDF DLIB',
                                     uselib_local = 'gamesys lua',
                                     proto_gen_py = True,
                                     target = 'test_script',
                                     source = 'test_script.cpp')

    test_script.install_path = None


    
