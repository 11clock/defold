#! /usr/bin/env python

import os, sys

def build(bld):
    proto_include_path = bld.env['DYNAMO_HOME'] + '/ext/include'

    copy = 'cp'
    if sys.platform == 'win32':
        copy = 'copy'

    bld.new_task_gen(rule='%s %s/%s ${TGT}' % (copy, proto_include_path, 'google/protobuf/compiler/plugin.proto'),
                     target='plugin.proto',
                     name='copy_plugin.proto',
                     shell=True)

    bld.new_task_gen(
         rule   = 'protoc --python_out=. -I . -I %s ${SRC}' % (proto_include_path),
         source ='plugin.proto',
         after = 'copy_plugin.proto',
         shell = True)

    ddf_ext = bld.new_task_gen(
         rule   = 'protoc --python_out=${TGT[0].dir(env)} --cpp_out=${TGT[0].dir(env)} -I ${SRC[0].src_dir(env)} -I %s ${SRC}' % (proto_include_path),
         source = 'ddf_extensions.proto',
         target = 'ddf_extensions_pb2.py',
         shell = True)

    bld.install_files('${PREFIX}/lib/python',
                      ddf_ext.path.find_or_declare('ddf_extensions_pb2.py').abspath(ddf_ext.env),
                      ddf_ext.env)

    bld.install_files('${PREFIX}/lib/python',
                      ddf_ext.path.find_or_declare('plugin_pb2.py').abspath(ddf_ext.env),
                      ddf_ext.env)

    bld.add_group()

    bld.new_task_gen(
            features = 'cxx cstaticlib ddf',
            includes = '../..',
            source = 'ddf_extensions.proto ddf.cpp ddf_load.cpp ddf_save.cpp ddf_inputbuffer.cpp ddf_util.cpp ddf_message.cpp ddf_loadcontext.cpp ddf_outputstream.cpp',
            proto_gen_cc = True,
            proto_compile_cc = True,
            proto_gen_java = True,
            proto_gen_py = False,
            protoc_includes = '.',
            target = 'ddf',
            # NOTE: default/... is hardcoded. How to solve?
            classpath=bld.env.PROTOBUF_JAR + os.pathsep + 'default/src/java',
            install_path='${PREFIX}/lib')

    bld.install_files('${PREFIX}/include/ddf', 'ddf.h')

def configure(conf):
    pass

