#! /usr/bin/env python

import os, sys
import waf_graphics, waf_dynamo


def build(bld):
    obj = bld.new_task_gen(features = 'cxx cstaticlib',
                           includes = ['. opengl'],
                           proto_gen_py = True,
                           target = 'graphics')
    obj.find_sources_in_dirs('opengl ../proto')
    obj.source.append('../proto/graphics_ddf.proto')

    obj = bld.new_task_gen(features = 'cxx cstaticlib',
                           includes = '.',
                           proto_gen_py = True,
                           target = 'graphics_util')
    obj.find_sources_in_dirs('util')
    obj.source.append('../proto/graphics_util_ddf.proto')

    bld.install_files('${PREFIX}/include/graphics/', 'graphics_device.h')
    bld.install_files('${PREFIX}/include/graphics/opengl', 'opengl/opengl_device_defines.h')

    bld.install_files('${PREFIX}/include/graphics_util', 'util/fontrenderer.h')
    bld.install_files('${PREFIX}/include/graphics_util', 'util/debugrenderer.h')

    bld.install_files('${PREFIX}/bin', 'ddsc.py')
    bld.install_files('${PREFIX}/bin', 'fontc.py')
    bld.install_files('${PREFIX}/lib/python', 'dds.py')
    bld.install_files('${PREFIX}/lib/python', 'waf_graphics.py')

    test_app = bld.new_task_gen(
        features = 'cxx cprogram',
        uselib_local = 'graphics graphics_util',
        target = 'test_app')
    test_app.find_sources_in_dirs('test')
    test_app.install_path = None


def configure(conf):
    waf_dynamo.configure(conf)

    if sys.platform == "darwin":
        platform = "darwin"
    elif sys.platform == "linux2":
        platform = "linux"
    elif sys.platform == "win32":
        platform = "win32"
    else:
        conf.fatal("Unable to determine platform")

    if platform == "darwin":
        conf.env.append_value('LINKFLAGS', '-framework Cocoa -framework OpenGL -lSDLmain -lSDL')
    if platform == "linux":
        conf.env.append_value('LINKFLAGS', '-lglut -lXext -lX11 -lXi -lGL -lGLU -lSDL')
    if platform == "win32":
       conf.env.append_value('LINKFLAGS', ['/SUBSYSTEM:WINDOWS', 'SDL.lib', 'SDLmain.lib', 'opengl32.lib'])

    conf.env.append_value('CPPPATH', ".")
    conf.env.append_value('CXXDEFINES', "DDF_EXPOSE_DESCRIPTORS")
    




