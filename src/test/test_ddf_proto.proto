package TestDDF;

option java_package = "com.dynamo.ddf.proto";
// NOTE: This is not a comment, ie has effect. We should probably add an user defined options for this
// option ddf_java_package = "com.dynamo.ddf.test";
option java_outer_classname = "TestDDF";

message Simple 
{
    required int32 a = 1;
}

message ScalarTypes 
{
    required float  Float = 1;
    required double Double = 2;
    required int32  Int32 = 3;
    required uint32 Uint32 = 4;
    required int64  Int64 = 5;
    required uint64 Uint64 = 6;
    required string String = 7;
}

enum TestEnum
{
    TestEnumVal1 = 10;
    TestEnumVal2 = 20;
}

message NestedType
{
    message TheNestedType
    {
        required int32 x = 1;
    }
    required int32 x = 1;
}

message Simple01
{
    required uint32 x = 1;
    required uint32 y = 2;
}

message Simple01Repeated
{
    repeated Simple01 array = 1;
}

message Simple02Repeated
{
    repeated uint32 array = 1;
}

message StringRepeated
{
    repeated string array = 1;
}

message NestedMessage
{
    message Nested
    {
        required int32 x = 1;
    }

    required Nested n1 = 1;
    required Nested n2 = 2;
}

message Mesh
{
    enum Primitive
    {
        TRIANGLES = 1;
        QUADS = 2;
    }

    required string    Name = 1;
    repeated float     Vertices = 2;
    repeated uint32    Indices = 3;
    required uint32    PrimitiveCount = 4;
    required Primitive PrimitiveType = 5;
}

message NestedArraySub2
{
    required uint32 a = 1;
}

message NestedArraySub1
{
    required uint32 b = 1;
    repeated NestedArraySub2 array2 = 2;
    required uint32 c = 3;
}

message NestedArray
{
    required uint32 d = 1;
    repeated NestedArraySub1 array1 = 2;
    required uint32 e = 3;
}


message Bytes
{
    required bytes data = 1;
}

message MaterialDesc
{
    enum ParameterType
    {
        VECTOR1 = 1;
        VECTOR2 = 2;
        VECTOR3 = 3;
        VECTOR4 = 4;
    }

    enum ParameterSemantic
    {
        GENERIC = 1;
        COLOR = 2;
    }

    message Vector4
    {
        required float x = 1;
        required float y = 2;
        required float z = 3;
        required float w = 4;
    }

    message Parameter
    {
        required string Name = 1;
        required ParameterType Type = 2;
        required ParameterSemantic Semantic = 3;
        required uint32 Register = 4;
        required Vector4 Value = 5;
    }
    
    required string Name = 1;
    required string VertexProgram = 2;
    required string FragmentProgram = 3;
    repeated Parameter VertexParameters = 4;
    repeated Parameter FragmentParameters = 5;
}

message MissingRequiredTemplate
{
	required int32 a = 1000;
}

message MissingRequired
{
	required int32 a = 1000;
	required int32 b = 2000;
}




