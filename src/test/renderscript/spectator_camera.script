function init(self)
    -- properties
    self.aspect_ratio = 1.78
    self.fov = 0.45
    self.near_z = 0.1
    self.far_z = 1000
    self.linear_speed = 10.0
    self.linear_boost = 8.0
    self.linear_retard = 0.1
    self.angular_speed = 1.2
    self.angular_boost = 2.0
    self.angular_retard = 0.2
    -- state
    self.move_input = vmath.vector3(0, 0, 0)
    self.look_input = vmath.vector3(0, 0, 0)
    self.boost_input = 0

    go.post_to(go.get_id(self), "spectator_camera.camerac", "acquire_camera_focus")
    go.post("acquire_input_focus", { game_object_id = go.get_id(self) })
end

function update(self, dt)
    -- right points to the left since we are moving the camera
    local move = self.move_input * vmath.length_sqr(self.move_input)
    local look = self.look_input * vmath.length_sqr(self.look_input)

    local linear_boost = 1
    local angular_boost = 1
    if self.boost_input > 0 then
        linear_boost = self.boost_input * self.linear_boost + (1 - self.boost_input)
        angular_boost = self.boost_input * self.angular_boost + (1 - self.boost_input);
    else
        linear_boost = -self.boost_input * self.linear_retard + (1 + self.boost_input)
        angular_boost = -self.boost_input * self.angular_retard + (1 + self.boost_input)
    end

    local angular_speed = self.angular_speed * angular_boost;
    local r_x = vmath.quat_rotation_x(dt * angular_speed * look.y)
    local r_y = vmath.quat_rotation_y(dt * angular_speed * look.x)
    -- y-rotation is in translated world space and x-rotation is in local space
    go.set_rotation(self, r_y * go.get_rotation(self) * r_x)

    move = move * dt * self.linear_speed * linear_boost
    go.set_position(self, go.get_position(self) + vmath.rotate(go.get_rotation(self), move))

    self.move_input = vmath.vector3(0, 0, 0)
    self.look_input = vmath.vector3(0, 0, 0)
    self.boost_input = 0
end

function on_input(self, action_id, action)
    if action_id == hash("move_right") then
        self.move_input.x = self.move_input.x + action.value
    elseif action_id == hash("move_left") then
        self.move_input.x = self.move_input.x - action.value
    elseif action_id == hash("move_up") then
        self.move_input.z = self.move_input.z - action.value
    elseif action_id == hash("move_down") then
        self.move_input.z = self.move_input.z + action.value
    elseif action_id == hash("ascend") then
        self.move_input.y = self.move_input.y + action.value
    elseif action_id == hash("descend") then
        self.move_input.y = self.move_input.y - action.value
    elseif action_id == hash("look_right") then
        self.look_input.x = self.look_input.x - action.value
    elseif action_id == hash("look_left") then
        self.look_input.x = self.look_input.x + action.value
    elseif action_id == hash("look_up") then
        self.look_input.y = self.look_input.y + action.value
    elseif action_id == hash("look_down") then
        self.look_input.y = self.look_input.y - action.value
    elseif action_id == hash("boost") then
        self.boost_input = self.boost_input + action.value
    elseif action_id == hash("retard") then
        self.boost_input = self.boost_input - action.value
    elseif action_id == hash("profiler_toggle") and action.pressed then
        go.post("toggle_profile")
    end
    return true
end
