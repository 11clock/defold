#! /usr/bin/env python

VERSION='0.1'
APPNAME='resource'

srcdir = '.'
blddir = 'build'

import os
import sys
sys.path = ["src"] + sys.path
import waf_dynamo, waf_ddf, waf_resource

os.environ['PATH'] = os.path.abspath('src') + os.pathsep + os.environ['PATH']

def init():
    pass

def set_options(opt):
    opt.tool_options('compiler_cc')
    opt.tool_options('compiler_cxx')
    opt.tool_options('waf_dynamo')

def configure(conf):
    conf.check_tool('compiler_cc')
    conf.check_tool('compiler_cxx')
    conf.check_tool('waf_dynamo')
    conf.check_tool('waf_resource')

    waf_ddf.configure(conf)

    conf.sub_config('src')

    conf.env.append_value('CPPPATH', "default/src")
    conf.env['LIB_GTEST'] = 'gtest'
    conf.env['STATICLIB_DLIB'] = 'dlib'
    conf.env['STATICLIB_DDF'] = 'ddf'

    platform = conf.env['PLATFORM']

    if platform == "linux":
        conf.env['LIB_THREAD'] = 'pthread'
        conf.env['LIB_PLATFORM_SOCKET'] = ''
    elif 'darwin' in platform:
        conf.env['LIB_THREAD'] = ''
        conf.env['LIB_PLATFORM_SOCKET'] = ''
    else:
        conf.env['LIB_THREAD'] = ''
        conf.env['LIB_PLATFORM_SOCKET'] = 'WS2_32'

    conf.env.append_unique('CCDEFINES', 'DLIB_LOG_DOMAIN="RESOURCE"')
    conf.env.append_unique('CXXDEFINES', 'DLIB_LOG_DOMAIN="RESOURCE"')

def build(bld):
    bld.add_subdirs('src')

import Build, Options
import os, subprocess
def shutdown():
    if not Options.commands['build']:
        return

    # TODO: Fix support for win32
    from Logs import warn, error
    import urllib2, time, atexit

    os.system('sh scripts/start_http_server.sh')
    atexit.register(os.system, 'sh scripts/stop_http_server.sh')

    start = time.time()
    while True:
        if time.time() - start > 5:
            error('HTTP server failed to start within 5 seconds')
            sys.exit(1)
        try:
            urllib2.urlopen('http://localhost:6123')
            break
        except urllib2.URLError:
            print('Waiting for HTTP testserver to start...')
            sys.stdout.flush()
            time.sleep(0.5)

    waf_dynamo.run_gtests(valgrind = True)
