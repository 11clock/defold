package dmVScriptDDF;

import "ddf/ddf_extensions.proto";
import "ddf/ddf_math.proto";

option java_package = "com.dynamo.vscript.proto";
option java_outer_classname = "VScript";

enum BasicType
{
    NUMBER  = 0;
    STRING  = 1;
    LIST    = 2;
    MESSAGE = 3;
}

message Type
{
    required BasicType basic_type = 1;
    // Set if type_class == LIST
    optional BasicType type_of    = 2;
    // Set if type_of == MESSAGE
    optional string type_name     = 3;
}

enum StatementType
{
    IF           = 0;
    IF_ELSE      = 1;
    SET_VARIABLE = 2;
    INVOKE       = 3;
    PRINT        = 4;
}

enum ExpressionType
{
    ADD           = 1;
    SUB           = 2;
    MUL           = 3;
    DIV           = 4;
    INVOKE_EXPR   = 5;
    CONSTANT      = 6;
    LT            = 7;
    LE            = 8;
    EQ            = 9;
    GE            = 10;
    GT            = 11;
    LOAD_VARIABLE = 12;
}

message Value
{
    required Type type           = 1;
    optional float float_value   = 2;
    optional string string_value = 3;
}

message Expression
{
    required ExpressionType type    = 1;

    // left/right for binary expression, arguments, etc
    repeated Expression expressions = 2;

    // For CONSTANT expression
	optional Value constant         = 3;

	// For LOAD_VARIABLE and INVOKE_EXPR
    optional string name            = 4;
}

message Statement
{
    required StatementType type        = 1;

    // if-true-path, etc
    repeated Statement statements      = 2;

    // else-path
    repeated Statement else_statements = 3;

    // For conditional expression, assign expression etc
    optional Expression expression     = 4;

    // For INVOKE
    repeated Expression arguments      = 5;

    // Used for SET_VARIABLE
    optional string name               = 6;
}

enum BlockType
{
    // Procedure declaration
    PROCEDURE = 0;

    // Message handling, eg messages and input
    HANDLER   = 1;
}

message Block
{
    required BlockType  block_type = 1;
    repeated Statement  statements = 2;
    optional string     id = 3;
}

message GlobalVariable
{
    required string name         = 1;
    required Type type           = 2;
    required Value initial_value = 3;
}

message VisualScriptFile
{
    repeated Block blocks                    = 1;
    repeated GlobalVariable global_variables = 2;
}

message Prototype
{
    required string name = 1;
    repeated Type arguments = 2;
}

message PrototypeFile
{
    repeated Prototype prototypes = 1;
}
