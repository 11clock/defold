#! /usr/bin/env python

VERSION='0.1'
APPNAME='docs'

srcdir = '.'
blddir = 'build'

import sys, os, re
import Task, TaskGen
from TaskGen import extension

def scan_asciidoc(task):
    deps = []
    with open(task.inputs[0].abspath()) as f:
        for line in f:
            line.strip()
            if line.startswith('image:'):
                m = re.search(r'^image::?(\S+?)(\[\S+?\])$', line)
                if (m != None):
                    deps.append(task.inputs[0].parent.find_resource(m.groups(1)[0]))
    return (deps, [])

def init():
    pass

def configure(conf):
    conf.find_program('asciidoc', var='ASCIIDOC')
    conf.env['EMBED_VIDEO'] = os.path.abspath('scripts/embed_video.py')

asciidoc = Task.simple_task_type('asciidoc', '${ASCIIDOC} -a data-uri -o ${TGT} ${SRC}',
                                 shell=True)

asciidoc.scan = scan_asciidoc

embed_video = Task.simple_task_type('embed_video', 'python ${EMBED_VIDEO} ${SRC} ${TGT}',
                                    shell=True,
                                    after = 'asciidoc')

@extension('.txt')
def proto_file(self, node):
        doc = self.create_task('asciidoc')
        doc.set_inputs(node)
        out = node.change_ext('.html_tmp')
        doc.set_outputs(out)

        embed = self.create_task('embed_video')
        embed.set_inputs(out)
        embed_out = node.change_ext('.html')
        embed.set_outputs(embed_out)

        self.bld.install_files('${PREFIX}/share/doc',
                               embed_out.abspath(self.env), self.env)

def build(bld):
    dirs = ['src/business_plan', 'src/manual', 'src/presentation',
            'src/demos/docs']
    tsk = bld.new_task_gen(install_path='${DYNAMO_HOME}/share/doc')
    tsk.find_sources_in_dirs(dirs)

GAME_PROJECT = """
[project]
title = %(title)s
[bootstrap]
main_collection = %(main_collection)s
[input]
game_binding = /input/game.input_bindingc
[display]
width = 1280
height = 720
"""

def install_sample(bld, sample_dir):
    name = os.path.basename(sample_dir)
    target_dir = '%s/content/samples/%s' % (bld.env.PREFIX, name)
    print >> sys.stderr, 'installing %s' % target_dir
    import shutil
    if os.path.exists(target_dir):
        shutil.rmtree(target_dir)

    shutil.copytree(sample_dir, '%s/%s' % (target_dir, name))
    shutil.copytree('%s/../input' % sample_dir, '%s/input' % target_dir)
    shutil.copy('%s/../wscript' % sample_dir, target_dir)

    f = open('%s/game.project' % target_dir, 'w')
    f.write(GAME_PROJECT % { 'title' : name, 'main_collection' : ('/%s/main.collectionc' % name) } )
    f.close()

    os.system('cd %s && git init && git add . && git commit -m "Initial import"' % target_dir)

def install(bld):
    import Scripting
    Scripting.install(bld)
    for sample in ['hud', 'level_complete', 'main_menu', 'parallax']:
        install_sample(bld, 'src/demos/%s' % sample)
