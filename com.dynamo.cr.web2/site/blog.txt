:max-width: 45em

Update - Web Site Face Lift & Script Samples
--------------------------------------------
_January 8, 2012_

Web Site Face Lift
~~~~~~~~~~~~~~~~~~

As you have probably noticed by now, our web site has had a major face lift.
We have also restructured the information a bit, but everything should hopefully be easier to find now.

We have also added two new features to the link:#dashboard:[dashboard].

The first is that we now use link:http://www.gravatar.com[Gravatar] to supply the avatars for us.
To have your own avatar appear in the dashboard, link:https://en.gravatar.com/site/signup/[register] with Gravatar and setup your avatar there.
We think Gravatar is a great service and hope that it will catch on more.

The second feature is that you can now see the activity in your projects.
Click on a project in the dashboard and the activity is displayed in the lower right.
When you create a project from a template, the activity from that template is currently copied into your new project.
So don't be alarmed if you see unfamiliar activity from us in the Defold-team or Mr. Builder, our former game-dev robot.
We will fix this at some point in the future.

image:images/blog/20120108/project_activity.png["Activity with Gravatars"]

Script Samples
~~~~~~~~~~~~~~

We have added a few script samples on the link:#documentation:[documentation] page.
We hope they will both inspire and provide aid in understanding how to make animations and effects using scripting.
There are both samples that deals with gui animation (*HUD*, *Level Complete* and *Main Menu*) and game object animation (*Parallax*).

We have also uploaded videos to Youtube showing the samples in action.
To produce the videos, we used the new video capturing feature we added earlier in the week.
Even the title screen at the beginning of each video was captured in the engine.
The title screens are in fact a single GUI scene that we populate with different data depending on which sample to capture.
This means we don't have to do any video editing when we change the content of the samples, the videos will be ready for upload immediately.
Ask us for details in the user group if you are curious about how to do this yourself.

We have not yet added the script samples as template projects, but we will do that as soon as possible.

Bugs
~~~~

We also had the time to fix a few more bugs that crept up.

- Render was missing from the reference documentation
- vmath.lerp did not accept numbers in addition to vectors and quaternions
- Animations could not be deleted from tile sets

Roadmap
~~~~~~~

Apart from including the script samples as template projects, we will continue with the User Guide next week.
Please, check out the Defold Roadmap we posted in the group for more details.
Remember that you can influence what we should work on by commenting in the document.

We hope you like the new web site! Tell us what you think in the user group!

Update - Video Capture, Fonts, Colors, Tweaks & Bugs
----------------------------------------------------
_January 5, 2012_

Video Capture
~~~~~~~~~~~~~

We are proud to announce that you now can capture videos of your running game from within your scripts!
Certain members of the Defold-team failed to relax during Christmas and instead implemented this excellent feature.
It is controlled through message passing and very easy to use.
Simply do the following in a script when you want to start recording video:

[source,lua]
----
msg.post("@system:", "start_record", { file_name = "test_rec.ivf" } )
----

When you want the recording to end, do:

[source,lua]
----
msg.post("@system:", "stop_record")
----

The messages are explained in more detail in the documentation under link:/#documentation:[Engine].
The recorded file is compressed through link:http://en.wikipedia.org/wiki/VP8[VP8] in the link:http://wiki.multimedia.cx/index.php?title=IVF[IVF] container, which can be uploaded to Youtube as is.
When the time comes, we will add the ability of uploading to Youtube from your scripts too.
This means that you can let players capture their gaming sessions and upload them from inside your game!

If you want to convert the files to a more common format, you can use link:http://www.mirovideoconverter.com/[MiroVideoConverter].
There seems to be a bug when playing these files through VLC, it stops playback around 1 second before the video should end.

We haven't yet had the time to include audio in the captured videos, but we hope that this feature can be of value anyway.
This will of course be fixed in time.

Fonts
~~~~~

We have fixed the font rendering, which has been rather ugly for a while.
We also added the ability to set color and alpha of outlines and shadows from within the GUI editor.
We have not yet had the time to render them properly in the editor preview, but the effects should be visible when running the game.

image:images/blog/20120105/fonts2.png["Fonts in the GUI Editor"]

image:images/blog/20120105/fonts.png["Fonts in the running game"]

Background Color
~~~~~~~~~~~~~~~~

It is now possible to set the background color of a game in the game.project file.
This is a work-around until we have fixed this properly, so it will be easier to specify.
To set the color to bright red, include this in your game.project file:

----
[render]
clear_color_red = 1
clear_color_green = 0
clear_color_blue = 0
clear_color_alpha = 0
----

Note that the values should all be between 0-1.
You can also change the background color on the fly in a script by doing:

[source,lua]
----
msg.post("@render:", "clear_color", { color = vmath.vector4(1, 0, 0, 0) } )
----

game.project to scripts
~~~~~~~~~~~~~~~~~~~~~~~

You can now read data from game.project inside your scripts.
This is mostly useful for testing purposes, but can also be used for reading global configuration data.
Below is an example of how to add and read data.

In your game.project file, add:

----
[my_category]
my_value = 1
----

Then you can read the value inside your scripts, like so:

[source,lua]
----
local my_value = tonumber(sys.get_config("my_category.my_value"))
----

This is detailed in the documentation under link:/#documentation:[Script].
Also note that you can read any value from the game.project-file, e.g. "display.width".

Bugs
~~~~

We also fixed some annoying bugs.
Here is a list of what we fixed so far:

- Spawn points with no prototype specified caused ugly build errors
- When browsing for gui-scripts in gui-files, no files would appear
- Rotation and scale were not visualized in the GUI editor
- Files were not automatically saved when building (launching the game)
- Refactoring for tile grids did not work
- Deselecting a running animation in a sprite caused problems
- Issues when selecting manipulators with the mouse in the Scene editor
- Some nodes in the Collection editor seemed like they could be transformed, when they couldn't (e.g. tile grids)
- Missing documentation for physics.ray_cast script function (see documentation under link:/#documentation:[GameSys])
- Ray casts of zero length yielded assert (engine crash)
- Misleading message when launching the game with empty resource paths
- Crash when rendering a GUI with many nodes

Please let us know if there are more bugs in need of urgent remedy.

Roadmap
~~~~~~~

Don't forget to comment on the roadmap we posted in the user-group.
As of now, we are working hard on documentation and an update of the web site, but we are anxious to hear about what you want to be fixed.
Since this update has been very technical, you are most welcome to post in the user-group if anything was unclear or you just like more information.

Hope you like this update!

Update - Lots!
--------------
_December 22, 2011_

It has been almost exactly a whole month since our latest release.
We aim to have a minimal release cycle (a week optimally), which would both let us get immediate feedback and be able to respond to new requests faster.
This time, however, there was simply too much that needed to be done.
To make up for this, we made this release extra fat and juicy, as appropriate for the holidays to come.
A month-long crunch is over and the Defold-team is about to kick back for four entire days!

Sprites, 2nd Edition
~~~~~~~~~~~~~~~~~~~~

We have implemented the basics of the redesigned sprite system.
Since this breaks backwards compatibility, the new component is called 'Sprite2' and the old component is considered deprecated.

What we implemented so far is that sprites now uses the tile set files, similar to how tile grids use them.
The animations are defined in the tile set, which simplifies trigging them in the scripts.

image:images/blog/20111222_sprite_anim_collision_editing/sprite_editing.png["Sprite Editing"]

Let us show by an example. To trigger an animation the old way, you would have a script that did:

[source,lua]
----
msg.post("#my_sprite", "play_animation", {start_tile = 1, end_tile = 3, playback = 1})
----

With the new system, you add the animation to the tile set (*Tile Set > Add Animation*). Then, in a script, you do:

[source,lua]
----
msg.post("#my_new_sprite", "play_animation2", {id = hash("my_animation")})
----

This also means that there is only one place to update if you want to change the layout of your tile set.

The animations added to the tile set can also be previewed in-place in the editor.

image:images/blog/20111222_sprite_anim_collision_editing/animation_editing.png["Animation Editing"]

Simply select an animation and then *Tile Set > Play/Stop Animation*.
This makes it much more easy to make sure you have specified the animation correctly.
Here is a clip showing how it looks:

link:/site/images/blog/20111222_sprite_anim_collision_editing/sprite_anim_preview.mp4[Animation Clip]

When an animation in the new system has completed, the script which started it will receive an 'animation_done2' message.
We have updated the link:/#documentation:[documentation] to describe the new messages.

Speaking of tile sets, we have also fixed an issue of the collision group colors changing anytime the list was reordered.
Now they stay the same color, and also yields an error if you use more groups than the maximum allowed (16).

We have yet to implement the cues which will let you post messages automatically at certain frames during the animations.
This is a great way to trigger effects for example.
We also post-poned the flip-tile feature, which will let you reuse tiles for different animations.
An example of this would be to have walk animations going both left and right based on the same set of tiles, but flipped for one of the directions.

Backwards Compatibility
~~~~~~~~~~~~~~~~~~~~~~~

We are very concerned about always staying backwards compatible, but there will always be improvements that force us to move forward.
The new sprite system is an example of this.
To not break any of your content, we are now testing a strategy of having three different stages to counter for this.
This is briefly what each stage means:

. The 'Sprite' type becomes deprecated, any such components will be flagged with warnings when opened.
  You should convert any such components to the new 'Sprite2' component.
. Support for the old 'Sprite' type is removed.
  'Sprite' and 'Sprite2' both means the new type now.
  Convert all 'Sprite2' components to 'Sprite'.
. Support for 'Sprite2' is removed.

It might seem complicated, but we hope that the guidance in the editor will be enough to lead you through it.
There will be weeks of time between each stage, so you should have plenty of time to make the adjustments.
It is also an experiment and we love to hear about any other ideas on how to do this as painless as possible.
Our main goal is to never break content with a new release.

Collision Objects
~~~~~~~~~~~~~~~~~

We have implemented many longed-for features regarding collision objects too.
It's been a nuicance to create separate convex shape files to specify the geometry for collision objects.
Now you can add them in-place in the editor, both for collision objects embedded in a game object and collision objects in separate files.
You can also add multiple shapes to the same collision object, to construct more complex collision shapes.

It was also very hard to specify their geometry in the property grids we used before in the editor.
Now we have added more manipulators (similar to Maya) to adjust the shapes in the scene view.
The manipulators are activated through the new *Scene* menu.

An example of this would be to select a sphere and then *Scene > Scale Tool*, which lets you adjust the radius of the sphere visually.
The tool works similar for other shapes, depending on their constitution.
The shapes can also be moved and rotated in relation to the collision object they belong to, through the *Move Tool* and *Rotate Tool* respectively.
The translation and rotation can still be specified in the property view too.
The rotation is now specified by euler-coordinates (degrees around each axis), which are much easier to use than quaternions.

image:images/blog/20111222_sprite_anim_collision_editing/shape_editing.png["Shape Editing"]

Scene Editor
~~~~~~~~~~~~

The manipulators described above are examples of how we have further improved the Scene Editor.
When needed, we will implement the same kind of functionality for other components.

Other new features is that the camera now works similar to the Collection Editor, i.e. Maya-controls.
It supports tracking (going sideways) and dollying (zooming).

The framing functionality from the Collection Editor has also been re-implemented in the Scene Editor.
It can be accessed through *Scene > Frame Objects*.
It frames whatever is selected, or all objects if nothing is.

Update Editor
~~~~~~~~~~~~~

Go to *Help > Check For Update* to update the editor to the latest version.

image:images/blog/20111222_sprite_anim_collision_editing/update_editor.png["Update Editor"]


Google Groups
~~~~~~~~~~~~~

As you all hopefully have noticed, we have started a Google Group for Defold users.
We hope that it will soon spur with activity and be sufficient as our community forum.
If you need support, this is currently the best place to turn to.
Issues with the service or concrete change requests should still be directed to the cases-mail.
We will add a post on how to use it in the group, to avoid spammers.

We are also proud to announce that two new projects have joined the Defold community!
So oldies, please be kind to the newbies in the group. :)

Roadmap
~~~~~~~

We are going to have a big planning day on December 27.
After that, we will post a list of the different areas we think needs improvement in the user group.
Our hope is to get a discussion going and to get feedback from you about which areas are the most important.
We really want to involve you all more in prioritizing what needs to be done when.
For now, these are the areas we have had in the roadmap for a long while:

. Documentation - User Manual, Tutorials, etc
. Website - Re-designed layout and structure
. Rendering Improvements

The Defold-team wishes you all a merry christmas!

Update - Scene Editor
---------------------
_November 21, 2011_

Scene Editor
~~~~~~~~~~~~

We have made lots of changes in the Scene Editor during the week.
First we did some major restructuring of the code, to make the foundation as stable and clean as possible.
Clean code means faster development cycles and less bugs, so we really hope this will get us up to speed when implementing new editing functionality, without sacrificing stability.

We also did more work on the presentation, to give you an idea of how we want it to be like.

The background in the Scene Editor is now a nice gradient (like the collection editor), which can be configured through File > Preferences.
Select Defold > Scene Editor in the dialog.

The outline view now displays icons for the items, along with markers if there are any issues in the data.
If you hover with the mouse over such a marker, a tooltip is displayed.

image:images/blog/20111121/sceneed_markers.png["Outline markers", width=880]

You can also open referenced files in the outline view by double-clicking the items (or hitting enter while they are selected).

The property view has been extended with the ability for us to disable irrelevant fields.
An example of this is when you have a collision object with its type set to anything else than dynamic.
Its mass is then irrelevant, since it should always be zero.
This is now taken care of by the editor and pipeline.

image:images/blog/20111121/sceneed_icons.png["Outline markers", width=880]

We have also made the values in drop-down lists more readable.

We have updated the icons for some of the file types and items.
We hope they not only look better, but also more clearly reflects their type now.

Lua Editor
~~~~~~~~~~

The Lua Editor was not very good at handling comments before.
This has now been fixed and it colors both multi-line comments and single line comments correctly now.

[source,lua]
----
local my_var = 1 -- this is a single line comment

--[[
This is a multi-line comment
--]]
----

Please let us know about any other fixes or suggestions through the cases-mail.

In the coming week we will work on sprite editing and collision object editing in parallel.

Roadmap
~~~~~~~

. Scene Editor - Sprite and collision object editing
. Documentation - User Manual, Tutorials, etc
. Rendering Improvements
. Website - Re-designed layout and structure

Update - Scene Editor
---------------------
_November 17, 2011_

Scene Editor
~~~~~~~~~~~~

Progress on the new Scene Editor has been a bit slower than we hoped, but now it has finally been released for you to try out!
Update the editor to 1.0.44 and it should be activated whenever you open a game object.
There is still more work needed to be done regarding presentation and visualization, but at least it now supports the functionality of the old version.

It has become apparent that a lot of tasks in the editor involves going back and forth between the outline view and the properties view.
Because of this, we have moved the outline view to be right above the properties way.
It also felt natural to have the views related to file resources to the left (Project Explorer and Changed Files) and content related views to the right.
Please comment if you have any other ideas on how the views should be restructured.

image:images/blog/scene_ed_go.png["Scene Editor", width=880]

Sprites
~~~~~~~

As soon as the game object editing and the basic functionality of the Scene Editor has been completed, we will implement the new sprite editing in it.
We made several passes on the design and it feels promising now.
A feature worth mentioning are predefined animations and cues.
When a cue is hit during an animation, the sprite component will broadcast a message to the other components.
This makes it easy to trigger sounds and other effects, register hits during attack animations in action games and lots of other possibilities.

Tiles
~~~~~

We have fixed a few more tile-related issues last weeks and how now deemed that system stable.
There are probably a few more bugs lurking around, but hopefully not too many.
Don't forget to report any issues to the case-mail.

Content Pipeline
~~~~~~~~~~~~~~~~

The new content pipeline has been installed on the server.
We have been given the permission from one of the projects to use it as a test bed.
Then we can verify stability in a real production environment.
We really appreciate that, thanks a lot!

Roadmap
~~~~~~~

. Scene Editor - Limited release supporting game objects, sprites and "simple types"
. Sprite Editing - Improved
. Content Pipeline - To only be used for testing at the moment
. Documentation - User Manual, Tutorials, etc
. Website - Re-designed layout and structure

Thanks for reading and don't forget to use the case-mail!

Update - Scene Editor & Content Pipeline
----------------------------------------
_November 6, 2011_

Scene Editor
~~~~~~~~~~~~

A new editor has spawned as a result from the design work on game object editing, it is called the _Scene Editor_.
It will ultimately replace all the other editors, with the exception of text (scripts and shaders) and 2D (tile sets and guis) editors.

It has a mix of behaviours and functionality from the current editors, but all put into one.
It will support in-place items and items referenced from files, like the current game object editor does.
It will also support the structural and visual overview that the current collection editor has.
This makes it suitable for editing any item present in the scene graph, such as collections, game objects, sprites, cameras, etc.

It was tricky to design because of its complexity, so we made a prototype to get a better understanding of the problem.
The prototype has been completed and we really feel we are onto something interesting now.
Below is a screen-shot of the prototype, please note that presentation was not a priority. :-)

image:images/blog/scene_ed_prot.png["Scene editor prototype", width=880]

There are a bit more design-knots to untie, but we hope to be able to release a working version in a week, hopefully replacing the current game object editor altogether.
That release will still be limited feature-wise relative the ultimate goal of course, but would cover the features currently available.

Content Pipeline
~~~~~~~~~~~~~~~~

The content pipeline now satisfies all the requirements we currently have on building content.
The next step is to install it on the server and let it run there silently for an extended period of time.
It is crucial that a content pipeline have high stability, since bugs in them can appear as changes not making it to the running game or even broken builds.
Such bugs can be hard to track down too.

Once we feel it's stable enough, using real content as test data, we will continue working on the local build feature.
There are a few more things needed to actually make it work, regarding security and so on.

Roadmap
~~~~~~~

. Tile Usability - Any known and new issues, workflow improvements, etc
. Scene Editor - Limited release supporting game objects, sprites and "simple types"
. Content Pipeline - To only be used for testing at the moment
. Documentation - User Manual, Tutorials, etc
. Website - Re-designed layout and structure

Thanks for reading and hope you will enjoy the upcoming features!

Update - Sprite Design, Tile Fixes & Content Pipeline
-----------------------------------------------------
_October 31, 2011_

Sprites
~~~~~~~

We have completed the first iteration of how sprites should be integrated with the tile sets.
Here is a list of the features included in the first version:

* Predefined animations in the sprite component
* Play animations for previewing in the editor
* Play animations in-game from scripts
* "Animation done" notification message to scripts
* Animated collision geometry
* User-defined cues at specified frames (to trigger sounds etc)
* Color tinting from scripts

To achieve better efficiency and higher quality, we are also trying out a modified development process for new features.
It looks roughly like this:

. Initial design (Phase 1)
. Feedback
. Revise design
. _Pause_
. Design (Phase 2)
. Planning - Break down into use-cases/stories/cases
. Implement with TDD (Test Driven Development)
. Initial Deployment
. Testing
. Bug reports and feature requests
. Prioritize
. Fix bugs and implement feature requests
. Deployment of 1.0

Right now we have come to the _Pause_ stage.
The idea is to let the design settle and be able to come back to it later with a fresh mind.
In the mean-time, we will continue to work on the design for the new Game Object editor.

Tiles
~~~~~

We had some collision issues with the new tile system.
It turned out that when aligning blocks to form ground and other continuous shapes that span over several cells, objects could fall through between the cells.
This issue has been fixed.

Another related problem is that not all of such cells are properly stitched together.
This causes little "bumps" to remain in the collision geometry, sometimes causing objects that slide across the surface to get stuck.
(The images are by courtesy of Mikael Säker.)

image:images/blog/platform_tutorial/character_stuck.png["Character getting stuck against the edge of new collision geometry"]

We are still working on a solution for this, but we did improve the in-game physics debugging.
It is much easier to see what's going on, physics-wise, in the games now.

image:images/blog/platform_tutorial/character_stuck_debug.png["Improved physics debug rendering"]

To enable and control the debugging, the following options are now available in the game.project-files:

* physics.debug - 1 to enable, 0 to disable
* physics.debug_alpha - alpha value to use for all physics debug rendering, 0.0-1.0
* physics.debug_scale - how big things like normals should appear on screen

Here is a sample of a game.project-file:

[source,txt]
----
[physics]
debug = 1
debug_alpha = 0.8
debug_scale = 30
----

Content Pipeline
~~~~~~~~~~~~~~~~

A long term goal we have is to enable users to build content locally on their own machines, in addition to the Defold-servers.
The biggest advantage of this is that build times would be lower, since we wouldn't have to send data back and forth over the internet.
Another advantage is that users can work and build content off-line.
It also means that we can integrate the pipeline into the editor, which in turn means better and more unified error handling.

The work has come a long way already and we are implementing a prototype at the moment to run tests on.

Roadmap
~~~~~~~

Currently, our roadmap looks like this:

. Tile Usability - Any known and new issues, workflow improvements, etc
. Game Object Editor Design - Better preview and editing support for components inside the game object editor
. Sprite Planning & Implementation
. Content Pipeline Prototype
. Documentation - User Manual, Tutorials, etc
. Website - Re-designed layout and structure

That's it at this time!
Hope you enjoyed reading and, as usual, let us know if you have any feedback or suggestions.

Update - Tiles & Properties
---------------------------
_October 23, 2011_

Welcome to the first update-post from Defold!
This is a way for us to tell you a bit about what has happened lately and what lies ahead.

Tiles
~~~~~

We are very excited to have completed the first iteration of our tile-system.
Tiles are typically used whenever you want to place a lot of images in a grid based fashion,
for example in platformers, RTS- and TD-games.

To start putting tiles into your game, you first need to create a 'tile set' (.tileset).
In the tile set, you specify the image containing the tiles, as well as metrics on how you have ordered your tiles inside the image.
If you also specify an image for collision, collision hulls will be automatically generated for the tiles.

image:images/blog/tile_1.0/tileset_editor.png["Tile set editor", width=880]

Please see the new menu *Tile Set* in the top menu bar for more of the features available when you are working with tile sets.

The next step is to create a 'tile grid'.
The tile grid is a new component that takes care of rendering and physics for the tiles in-game.
To be able to do this, the system needs to know which tile set you want to fetch the tiles from.
To start painting tiles into your grid, select a layer in the outline view.
If you look at the top menu bar, there is now a new menu called *Tile Grid* available.
Select *Tile Grid > Show Palette* to bring up the tile set you specified.

image:images/blog/tile_1.0/tilegrid_edior_brush.png["Tile set brush selection", width=880]

Click on a tile you want to use, which will turn the cursor into a brush with that tile selected.
Paint your tiles, rinse and repeat.
To erase painted tiles, open the palette again.
Click on the selected tile, which will turn the cursor into an eraser.

image:images/blog/tile_1.0/tilegrid_editor.png["Tile set editor", width=880]

To finally bring your newly painted tiles into the game, add the tile grid as a component to a game object present in the game.
If you also want to have collision on the tiles, add a collision object component to the same game object and specify
the tile grid as its collision shape.

image:images/blog/tile_1.0/collection_editor.png["Collection editor", width=880]

Another cool thing is that you can change the tiles in-game from your logic scripts.
Check out the new 'set_tile' message in the documentation ('GameSys').

Properties
~~~~~~~~~~

We have also completely revamped the property system used by the editor.
The most noticable thing is that the layout has changed from grid-based to form-based.
We have also started to employ a new usage-philosophy, which is that all user input should be accepted.
The input is still validated, but any errors or other message is now displayed in a non-intrusive way next to the related input fields.
No more annoying popup dialogs! :-)

image:images/blog/tile_1.0/property_messages.png["Property editor", width=880]

All of this new editor functionality is of course up to Defold-standards, which means complete support for:

* Undo/redo
* Reload
* Refactoring

What we haven't fixed yet however (among others) are:

* More convenient tools for painting/editing tiles (please contribute with your own suggestions!)
* Reload of tile grids in-game
* Sprites are still created/animated as usual

Roadmap
~~~~~~~

This is our roadmap, as it looks at this very moment, ordered from sooner to later.

. Sprite re-design - How to incorporate sprites better with the new tile system
. Tile Usability - Any known and new issues, workflow improvements, etc
. Game Object editor - Better preview and editing support for components inside the game object editor
. Documentation - User Manual, Tutorials, etc
. Website - Re-designed layout and structure

We really hope you enjoyed reading this.
As always, we would love to hear any feedback, change requests, complaints or other issues you experience while using Defold.
Direct them to the usual cases-mail.
Now go ahead and make a more original game than we did! ;-)

image:images/blog/tile_1.0/the_game.png["Tiles in-game", width=880]

[source,lua]
----
-- clean termination
function final(self)
    print("The Defold-Team thanks you for your support!")
end
----
