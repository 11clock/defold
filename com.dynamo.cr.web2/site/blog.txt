:max-width: 45em

Update - Scene Editor & Content Pipeline
----------------------------------------
*_November 6, 2011_*

Scene Editor
~~~~~~~~~~~~

A new editor has spawned as a result from the design work on game object editing, it is called the _Scene Editor_.
It will ultimately replace all the other editors, with the exception of text (scripts and shaders) and 2D (tile sets and guis) editors.

It has a mix of behaviours and functionality from the current editors, but all put into one.
It will support in-place items and items referenced from files, like the current game object editor does.
It will also support the structural and visual overview that the current collection editor has.
This makes it suitable for editing any item present in the scene graph, such as collections, game objects, sprites, cameras, etc.

It was tricky to design because of its complexity, so we made a prototype to get a better understanding of the problem.
The prototype has been completed and we really feel we are onto something interesting now.
Below is a screen-shot of the prototype, please note that presentation was not a priority. :-)

image:images/blog/scene_ed_prot.png["Scene editor prototype", width=880]

There are a bit more design-knots to untie, but we hope to be able to release a working version in a week, hopefully replacing the current game object editor altogether.
That release will still be limited feature-wise relative the ultimate goal of course, but would cover the features currently available.

Content Pipeline
~~~~~~~~~~~~~~~~

The content pipeline now satisfies all the requirements we currently have on building content.
The next step is to install it on the server and let it run there silently for an extended period of time.
It is crucial that a content pipeline have high stability, since bugs in them can appear as changes not making it to the running game or even broken builds.
Such bugs can be hard to track down too.

Once we feel it's stable enough, using real content as test data, we will continue working on the local build feature.
There are a few more things needed to actually make it work, regarding security and so on.

Roadmap
~~~~~~~

. Tile Usability - Any known and new issues, workflow improvements, etc
. Scene Editor - Limited release supporting game objects, sprites and "simple types"
. Content Pipeline - To only be used for testing at the moment
. Documentation - User Manual, Tutorials, etc
. Website - Re-designed layout and structure

Thanks for reading and hope you will enjoy the upcoming features!

Update - Sprite Design, Tile Fixes & Content Pipeline
-----------------------------------------------------
*_October 31, 2011_*

Sprites
~~~~~~~

We have completed the first iteration of how sprites should be integrated with the tile sets.
Here is a list of the features included in the first version:

* Predefined animations in the sprite component
* Play animations for previewing in the editor
* Play animations in-game from scripts
* "Animation done" notification message to scripts
* Animated collision geometry
* User-defined cues at specified frames (to trigger sounds etc)
* Color tinting from scripts

To achieve better efficiency and higher quality, we are also trying out a modified development process for new features.
It looks roughly like this:

. Initial design (Phase 1)
. Feedback
. Revise design
. _Pause_
. Design (Phase 2)
. Planning - Break down into use-cases/stories/cases
. Implement with TDD (Test Driven Development)
. Initial Deployment
. Testing
. Bug reports and feature requests
. Prioritize
. Fix bugs and implement feature requests
. Deployment of 1.0

Right now we have come to the _Pause_ stage.
The idea is to let the design settle and be able to come back to it later with a fresh mind.
In the mean-time, we will continue to work on the design for the new Game Object editor.

Tiles
~~~~~

We had some collision issues with the new tile system.
It turned out that when aligning blocks to form ground and other continuous shapes that span over several cells, objects could fall through between the cells.
This issue has been fixed.

Another related problem is that not all of such cells are properly stitched together.
This causes little "bumps" to remain in the collision geometry, sometimes causing objects that slide across the surface to get stuck.
(The images are by courtesy of Mikael SÃ¤ker.)

image:images/blog/platform_tutorial/character_stuck.png["Character getting stuck against the edge of new collision geometry"]

We are still working on a solution for this, but we did improve the in-game physics debugging.
It is much easier to see what's going on, physics-wise, in the games now.

image:images/blog/platform_tutorial/character_stuck_debug.png["Improved physics debug rendering"]

To enable and control the debugging, the following options are now available in the game.project-files:

* physics.debug - 1 to enable, 0 to disable
* physics.debug_alpha - alpha value to use for all physics debug rendering, 0.0-1.0
* physics.debug_scale - how big things like normals should appear on screen

Here is a sample of a game.project-file:

[source,txt]
----
[physics]
debug = 1
debug_alpha = 0.8
debug_scale = 30
----

Content Pipeline
~~~~~~~~~~~~~~~~

A long term goal we have is to enable users to build content locally on their own machines, in addition to the Defold-servers.
The biggest advantage of this is that build times would be lower, since we wouldn't have to send data back and forth over the internet.
Another advantage is that users can work and build content off-line.
It also means that we can integrate the pipeline into the editor, which in turn means better and more unified error handling.

The work has come a long way already and we are implementing a prototype at the moment to run tests on.

Roadmap
~~~~~~~

Currently, our roadmap looks like this:

. Tile Usability - Any known and new issues, workflow improvements, etc
. Game Object Editor Design - Better preview and editing support for components inside the game object editor
. Sprite Planning & Implementation
. Content Pipeline Prototype
. Documentation - User Manual, Tutorials, etc
. Website - Re-designed layout and structure

That's it at this time!
Hope you enjoyed reading and, as usual, let us know if you have any feedback or suggestions.

Update - Tiles & Properties
--------------------------
*_October 23, 2011_*

Welcome to the first update-post from Defold!
This is a way for us to tell you a bit about what has happened lately and what lies ahead.

Tiles
~~~~~

We are very excited to have completed the first iteration of our tile-system.
Tiles are typically used whenever you want to place a lot of images in a grid based fashion,
for example in platformers, RTS- and TD-games.

To start putting tiles into your game, you first need to create a 'tile set' (.tileset).
In the tile set, you specify the image containing the tiles, as well as metrics on how you have ordered your tiles inside the image.
If you also specify an image for collision, collision hulls will be automatically generated for the tiles.

image:images/blog/tile_1.0/tileset_editor.png["Tile set editor", width=880]

Please see the new menu *Tile Set* in the top menu bar for more of the features available when you are working with tile sets.
    
The next step is to create a 'tile grid'.
The tile grid is a new component that takes care of rendering and physics for the tiles in-game.
To be able to do this, the system needs to know which tile set you want to fetch the tiles from.
To start painting tiles into your grid, select a layer in the outline view.
If you look at the top menu bar, there is now a new menu called *Tile Grid* available.
Select *Tile Grid > Show Palette* to bring up the tile set you specified.

image:images/blog/tile_1.0/tilegrid_edior_brush.png["Tile set brush selection", width=880]

Click on a tile you want to use, which will turn the cursor into a brush with that tile selected.
Paint your tiles, rinse and repeat.
To erase painted tiles, open the palette again.
Click on the selected tile, which will turn the cursor into an eraser.

image:images/blog/tile_1.0/tilegrid_editor.png["Tile set editor", width=880]

To finally bring your newly painted tiles into the game, add the tile grid as a component to a game object present in the game.
If you also want to have collision on the tiles, add a collision object component to the same game object and specify
the tile grid as its collision shape.

image:images/blog/tile_1.0/collection_editor.png["Collection editor", width=880]

Another cool thing is that you can change the tiles in-game from your logic scripts.
Check out the new 'set_tile' message in the documentation ('GameSys').

Properties
~~~~~~~~~~

We have also completely revamped the property system used by the editor.
The most noticable thing is that the layout has changed from grid-based to form-based.
We have also started to employ a new usage-philosophy, which is that all user input should be accepted.
The input is still validated, but any errors or other message is now displayed in a non-intrusive way next to the related input fields.
No more annoying popup dialogs! :-)

image:images/blog/tile_1.0/property_messages.png["Property editor", width=880]

All of this new editor functionality is of course up to Defold-standards, which means complete support for:

* Undo/redo
* Reload
* Refactoring

What we haven't fixed yet however (among others) are:

* More convenient tools for painting/editing tiles (please contribute with your own suggestions!)
* Reload of tile grids in-game
* Sprites are still created/animated as usual

Roadmap
~~~~~~~

This is our roadmap, as it looks at this very moment, ordered from sooner to later.

. Sprite re-design - How to incorporate sprites better with the new tile system
. Tile Usability - Any known and new issues, workflow improvements, etc
. Game Object editor - Better preview and editing support for components inside the game object editor
. Documentation - User Manual, Tutorials, etc
. Website - Re-designed layout and structure

We really hope you enjoyed reading this.
As always, we would love to hear any feedback, change requests, complaints or other issues you experience while using Defold.
Direct them to the usual cases-mail.
Now go ahead and make a more original game than we did! ;-)

image:images/blog/tile_1.0/the_game.png["Tiles in-game", width=880]

[source,lua]
----
-- clean termination
function final(self)
    print("The Defold-Team thanks you for your support!")
end
----
