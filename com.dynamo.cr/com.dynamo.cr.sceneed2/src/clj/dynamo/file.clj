(ns dynamo.file
  "Functions to help developers load and save files"
  (:refer-clojure :exclude [load])
  (:require [clojure.java.io :as io])
  (:import [com.google.protobuf TextFormat]))

(defn- new-builder
  "Dynamically construct a protocol buffer builder, given a class as a variable."
  [class]
  (-> class (.getDeclaredMethod "newBuilder" (into-array Class []))
      (.invoke nil (into-array Object []))))

(defonce ^:private loaders (atom {}))

(defn register-loader
  "Associate a filetype (extension) with a loader function. The given loader will be
   used any time a file with that type is opened."
  [filetype loader]
  (swap! loaders assoc filetype loader))

(defn loader-for
  "Locate a loading function that knows how to work on the given file.

   If no suitable function has been registered, this returns a function
   that throws an exception."
  [filename]
  (let [lfs @loaders]
    (or
      (some (fn [[filetype lf]] (when (.endsWith filename filetype) lf)) lfs)
      (fn [_ _] (throw (ex-info (str "No loader has been registered that can handle " filename) {}))))))

(defn protocol-buffer-loader
  "Create a new loader that knows how to read protocol buffer files in text format.

   class is the Java class generated by the protoc compiler. It will probably be an inner class
   of some top-level name. Instead of a '.' for the inner class name separator, use a '$'.
   
   For example, the inner class called AtlasProto.Atlas in Java becomes AtlasProto$Atlas.

   f is a function to call with the deserialised protocol buffer message. f must take two arguments, the
   resource name and the immutable protocol buffer itself."
  [^java.lang.Class class f]
  (fn [nm input-reader]
    (let [builder (new-builder class)]
      (TextFormat/merge input-reader builder)
      (f nm (.build builder)))))

(defn load
  "Load a file. This looks up a suitable loader based on the filename. Loaders must be
   registered via register-loader before they can be used.

   This will invoke the loader function with the filename and a reader to supply the file contents."
  [filename]
  ((loader-for filename) filename (io/reader filename)))