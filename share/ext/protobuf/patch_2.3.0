diff --git a/gtest/include/gtest/internal/gtest-port.h b/gtest/include/gtest/internal/gtest-port.h
index ee97881..16c2ceb 100644
--- a/gtest/include/gtest/internal/gtest-port.h
+++ b/gtest/include/gtest/internal/gtest-port.h
@@ -461,7 +461,7 @@
 //      pops up a dialog window that cannot be suppressed programmatically.
 #if GTEST_HAS_STD_STRING && \
     (GTEST_OS_LINUX || GTEST_OS_MAC || GTEST_OS_CYGWIN || \
-     (GTEST_OS_WINDOWS_DESKTOP && _MSC_VER >= 1400) || GTEST_OS_WINDOWS_MINGW)
+     (GTEST_OS_WINDOWS_DESKTOP && _MSC_VER >= 1400) || GTEST_OS_WINDOWS_MINGW) && !defined(TVOS)
 #define GTEST_HAS_DEATH_TEST 1
 #include <vector>  // NOLINT
 #endif
diff --git a/src/google/protobuf/compiler/subprocess.cc b/src/google/protobuf/compiler/subprocess.cc
index de46a3e..288a813 100644
--- a/src/google/protobuf/compiler/subprocess.cc
+++ b/src/google/protobuf/compiler/subprocess.cc
@@ -32,6 +32,10 @@
 
 #include <google/protobuf/compiler/subprocess.h>
 
+#ifdef __EMSCRIPTEN__
+#include <sys/select.h>
+#endif
+
 #ifndef _WIN32
 #include <errno.h>
 #include <sys/wait.h>
@@ -285,6 +289,7 @@ Subprocess::~Subprocess() {
 }
 
 void Subprocess::Start(const string& program, SearchMode search_mode) {
+#ifndef TVOS
   // Note that we assume that there are no other threads, thus we don't have to
   // do crazy stuff like using socket pairs or avoiding libc locks.
 
@@ -337,6 +342,7 @@ void Subprocess::Start(const string& program, SearchMode search_mode) {
     child_stdin_ = stdin_pipe[1];
     child_stdout_ = stdout_pipe[0];
   }
+#endif
 }
 
 bool Subprocess::Communicate(const Message& input, Message* output,
diff --git a/src/google/protobuf/compiler/subprocess.h b/src/google/protobuf/compiler/subprocess.h
index f9e8ae8..7a6fa70 100644
--- a/src/google/protobuf/compiler/subprocess.h
+++ b/src/google/protobuf/compiler/subprocess.h
@@ -76,7 +76,7 @@ class Subprocess {
 #ifdef _WIN32
   // Given an error code, returns a human-readable error message.  This is
   // defined here so that CommandLineInterface can share it.
-  static string Subprocess::Win32ErrorMessage(DWORD error_code);
+  static string Win32ErrorMessage(DWORD error_code);
 #endif
 
  private:
diff --git a/src/google/protobuf/io/coded_stream.h b/src/google/protobuf/io/coded_stream.h
index dcbb0d4..3ddf0c3 100644
--- a/src/google/protobuf/io/coded_stream.h
+++ b/src/google/protobuf/io/coded_stream.h
@@ -109,6 +109,9 @@
 #ifndef GOOGLE_PROTOBUF_IO_CODED_STREAM_H__
 #define GOOGLE_PROTOBUF_IO_CODED_STREAM_H__
 
+#ifdef __EMSCRIPTEN__
+#include <limits.h>
+#endif
 #include <string>
 #ifndef _MSC_VER
 #include <sys/param.h>
diff --git a/src/google/protobuf/message.cc b/src/google/protobuf/message.cc
index 91e6878..fcb97b8 100644
--- a/src/google/protobuf/message.cc
+++ b/src/google/protobuf/message.cc
@@ -32,6 +32,9 @@
 //  Based on original Protocol Buffers design by
 //  Sanjay Ghemawat, Jeff Dean, and others.
 
+#ifdef __EMSCRIPTEN__
+#include <iostream>
+#endif
 #include <stack>
 #include <google/protobuf/stubs/hash.h>
 
diff --git a/src/google/protobuf/message.h b/src/google/protobuf/message.h
index c0062f9..98a5812 100644
--- a/src/google/protobuf/message.h
+++ b/src/google/protobuf/message.h
@@ -116,7 +116,7 @@
 // HP C++'s iosfwd doesn't work.
 #include <iostream>
 #else
-#include <iosfwd>
+#include <sstream>
 #endif
 
 #include <google/protobuf/message_lite.h>
diff --git a/src/google/protobuf/stubs/common.cc b/src/google/protobuf/stubs/common.cc
index 1e2d68d..0204bd6 100644
--- a/src/google/protobuf/stubs/common.cc
+++ b/src/google/protobuf/stubs/common.cc
@@ -44,6 +44,7 @@
 #define snprintf _snprintf    // see comment in strutil.cc
 #elif defined(HAVE_PTHREAD)
 #include <pthread.h>
+#elif defined(__EMSCRIPTEN__)
 #else
 #error "No suitable threading library available."
 #endif
@@ -313,6 +314,28 @@ void Mutex::AssertHeld() {
   // TODO(kenton):  Maybe keep track of locking thread ID like with WIN32?
 }
 
+#elif defined(__EMSCRIPTEN__)
+
+struct Mutex::Internal {
+};
+
+Mutex::Mutex()
+  : mInternal(new Internal) {
+}
+
+Mutex::~Mutex() {
+  delete mInternal;
+}
+
+void Mutex::Lock() {
+}
+
+void Mutex::Unlock() {
+}
+
+void Mutex::AssertHeld() {
+}
+
 #endif
 
 // ===================================================================
