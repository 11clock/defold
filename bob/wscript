#! /usr/bin/env python

VERSION = '0.1'
APPNAME = 'bob'

srcdir = '.'
blddir = 'build'

import os, sys
import Options

def init():
    pass

def set_options(opt):
    # Compatibility with waf_dynamo
    opt.add_option('--skip-tests', action='store_true', default=False, dest='skip_tests', help='skip unit tests')
    opt.add_option('--eclipse', action='store_true', default=False, dest='eclipse', help='print eclipse friendly command-line')

def configure(conf):
    conf.check_tool('waf_dynamo')
    conf.check_tool('java')

    classpath = []
    for j in 'commons-io-2.0.1.jar commons-lang3-3.0-beta.jar mockito-all-1.8.5.jar javolution-5.5.1.jar'.split():
        classpath.append('../lib/%s' % j)

    import glob
    for j in glob.glob('%s/share/java/*.jar' % conf.env['DYNAMO_HOME']):
        classpath.append(j)

    for j in glob.glob('%s/ext/share/java/*.jar' % conf.env['DYNAMO_HOME']):
        classpath.append(j)

    classpath.append(conf.env['DYNAMO_HOME'] + '/ext/share/java/junit-4.6.jar')
    classpath=os.pathsep.join(classpath)
    conf.env['CLASSPATH'] = classpath

def build(bld):
    bld.new_task_gen(rule = 'protoc ${SRC} --python_out=${TGT[0].dir(env)} -I../test_data',
                     source = 'test_data/test_bob_ddf.proto',
                     target = 'test_bob_ddf_pb2.py')

    # copy bob.py to bob for later installation below
    bld.new_task_gen(rule = 'cat < ${SRC} > ${TGT}',
                     source = 'src/bob.py',
                     target = 'bob')


    bld.new_task_gen(features = 'javac seq',
                     classpath=bld.env.CLASSPATH,
                     source_root = 'src')

    bld.add_group()

    bld.install_files('${PREFIX}/bin', 'bob', chmod=493)
    bld.install_files('${PREFIX}/lib/python', 'src/bob_pipeline.py')

def shutdown(ctx):
    if not Options.commands['build'] or getattr(Options.options, 'skip_tests', False):
        return

    classpath = []
    for j in 'commons-io-2.0.1.jar commons-lang3-3.0-beta.jar mockito-all-1.8.5.jar'.split():
        classpath.append('lib/%s' % j)

    classpath.append(os.getenv('DYNAMO_HOME') + '/ext/share/java/junit-4.6.jar')
    classpath.append('build/default/src')
    classpath = os.pathsep.join(classpath)

    ret = os.system('java -cp %s org.junit.runner.JUnitCore com.dynamo.bob.test.JBobTest' % classpath)
    if ret != 0:
        raise Exception('unit-test failed')

    # unit-test currently requires gcc
    if sys.platform == 'win32':
        return

    ret = os.system('python src/test/test_bob.py')
    if ret != 0: raise Exception('unit-test failed')

    dynamo_home = os.getenv('DYNAMO_HOME')
    classpath = [os.path.join(dynamo_home,'ext/share/java/jython.jar'),
                 'src',
                 os.path.join(dynamo_home, 'ext/lib/python/protobuf-2.3.0-py2.5.egg')]

    ret = os.system('java -cp %s org.python.util.jython src/test/test_bob.py' %
                    os.pathsep.join(classpath))
    if ret != 0: raise Exception('unit-test failed')

