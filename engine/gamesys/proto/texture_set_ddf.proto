package dmGameSystemDDF;

import "ddf/ddf_extensions.proto";
import "ddf/ddf_math.proto";
import "tile_ddf.proto";

option java_package = "com.dynamo.textureset.proto";
option java_outer_classname = "TextureSetProto";

/*
  Vertex format:

  struct Vertex
  {
      // Offset 0
      float x, y, z;
      // Offset 12
      uint16_t u, v;
      // Offset 16
  };
 */

// only used in a test. remove?
enum Constants
{
    VERTEX_SIZE = 16; // 3 * 4 + 4
}

message TextureSetAnimation
{
    required string id              = 1;
    required uint32 width           = 2;
    required uint32 height          = 3;
    required uint32 start           = 4;
    required uint32 end             = 5;
    optional uint32 fps             = 6 [default = 30];
    optional Playback playback      = 7 [default = PLAYBACK_ONCE_FORWARD];
    optional uint32 flip_horizontal = 8 [default = 0];
    optional uint32 flip_vertical   = 9 [default = 0];
    optional uint32 is_animation    = 10 [default = 0]; // Deprecated
}

// * Vertices are relative to the center of the sprite
// * Polygon may be concave
// * Indices for a triangle list (i.e. 3 indices per triangle)
message SpriteGeometry
{
    // A list of 2-tuples, each making up a point in a hull: [p0.x, p0.y, p1.x, p1.y, ... pN.x, pN.y] where N is (convex_hull_size-1)
    // Each point is relative to the sprite center
    repeated float  vertices= 1;
    // A list of 2-tuples, corresponding directly to the vertices
    repeated float  uvs     = 2;
    // list of 3-tuples, each defining a triangle in the vertex/uv list
    repeated uint32 indices = 3;
}

message TextureSet
{
    required string texture                 = 1 [(resource)=true];
    repeated TextureSetAnimation animations = 2;
    repeated ConvexHull convex_hulls        = 3;

    // Only used when the source is a tile-source
    // tile_width and tile_height should only be used in tilemap
    optional uint32 tile_width              = 4;
    optional uint32 tile_height             = 5;
    optional uint32 tile_count              = 6;

    repeated float collision_hull_points    = 16;
    repeated string collision_groups        = 17;

    // A series of four float pairs of UV coords, representing quad texture coordinates and
    // allowing for rotation on texture atlases.
    // For unrotated quads, the order is: [(minU,maxV),(minU,minV),(maxU,minV),(maxU,maxV)]
    // For rotated quads, the order is: [(minU,minV),(maxU,minV),(maxU,maxV),(minU,maxV)]
    // (See TextureSetGenerator.java)
    required bytes tex_coords               = 18;
    // A series of two float pairs of dimensions representing quad texture width and height in texels.

    optional bytes tex_dims                 = 19;

    // One geometry struct per image
    repeated SpriteGeometry geometries      = 20;
}
