import Task, TaskGen
from TaskGen import extension, declare_extension

def create_simple_protoc_task(name, ext, compiled_ext, type, before, shell = True, color = 'PINK', proto_file = ''):
    def create(self, node):
        task = self.create_task(name)
        task.set_inputs(node)
        out = node.change_ext(compiled_ext)
        task.set_outputs(out)

    cmd = 'protoc --encode=%s -I ../src/gameobject/test -I ../src/gameobject/test/input -I ../proto -I ${DYNAMO_HOME}/share/proto -I ${DYNAMO_HOME}/ext/include %s < ${SRC} > ${TGT}' % (type, proto_file)
    Task.simple_task_type(name, cmd, before=before, shell=shell, color=color)
    declare_extension([ext], create)

create_simple_protoc_task('aresource', '.a_pb', '.a', 'TestGameObjectDDF.AResource', before='cc cxx', proto_file = '../src/gameobject/test/component/test_gameobject_component_ddf.proto')
create_simple_protoc_task('bresource', '.b_pb', '.b', 'TestGameObjectDDF.BResource', before='cc cxx', proto_file = '../src/gameobject/test/component/test_gameobject_component_ddf.proto')
create_simple_protoc_task('cresource', '.c_pb', '.c', 'TestGameObjectDDF.CResource', before='cc cxx', proto_file = '../src/gameobject/test/component/test_gameobject_component_ddf.proto')
create_simple_protoc_task('message_target', '.mt_pb', '.mt', 'TestGameObjectDDF.MessageTarget', before='cc cxx', proto_file = '../src/gameobject/test/message/test_gameobject_message_ddf.proto')
create_simple_protoc_task('input_target', '.it_pb', '.it', 'TestGameObjectDDF.InputTarget', before='cc cxx', proto_file = '../src/gameobject/test/input/test_gameobject_input_ddf.proto')
create_simple_protoc_task('collection', '.collection', '.collectionc', 'dmGameObjectDDF.CollectionDesc', before='cc cxx', proto_file = '../proto/gameobject_ddf.proto')
create_simple_protoc_task('reload_target', '.rt_pb', '.rt', 'TestGameObjectDDF.ReloadTarget', before='cc cxx', proto_file = '../src/gameobject/test/reload/test_gameobject_reload_ddf.proto')
create_simple_protoc_task('no_user_data_res', '.no_user_data', '.no_user_datac', 'TestGameObjectDDF.NoUserDataResource', before='cc cxx', proto_file = '../src/gameobject/test/props/test_gameobject_props_ddf.proto')

Task.simple_task_type('gameobjectdesc', 'protoc --encode=dmGameObjectDDF.PrototypeDesc -I ../proto -I ${DYNAMO_HOME}/ext/include -I ${DYNAMO_HOME}/share/proto ../proto/gameobject_ddf.proto < ${SRC} > ${TGT}',
                      color='PINK',
                      before='cc cxx',
                      shell=True)

@extension('.go_pb')
def testresourcecont_file(self, node):
    obj_ext = '.goc'
    task = self.create_task('gameobjectdesc')
    task.set_inputs(node)
    out = node.change_ext(obj_ext)
    task.set_outputs(out)

Task.simple_task_type('luascript', 'cat < ${SRC} > ${TGT}',
                      color='PINK',
                      before='cc cxx',
                      shell=True)

@extension('.script')
def testresourcecont_file(self, node):
    obj_ext = '.scriptc'
    task = self.create_task('luascript')
    task.set_inputs(node)
    out = node.change_ext(obj_ext)
    task.set_outputs(out)

def build(bld):
    def new_test(dir, exts = ['.cpp', '.proto', '.go_pb', '.script']):
        test_task_gen = bld.new_task_gen(features = 'cxx cprogram',
                                         includes = '../../../src .',
                                         uselib = 'GTEST RESOURCE DDF PLATFORM_SOCKET PLATFORM_THREAD LUA SCRIPT DLIB',
                                         uselib_local = 'gameobject',
                                         proto_gen_py = True,
                                         target = '%s/test_gameobject_%s' % (dir, dir))
        test_task_gen.find_sources_in_dirs(dir, exts)
        test_task_gen.install_path = None

    new_test('collection', exts = ['.cpp', '.go_pb', '.script', '.collection'])
    new_test('component', exts = ['.cpp', '.proto', '.go_pb', '.script', '.a_pb', '.b_pb', '.c_pb'])
    new_test('delete')
    new_test('factory')
    new_test('hierarchy')
    new_test('id')
    new_test('input', exts = ['.go_pb', '.script', '.cpp', '.proto', '.it_pb'])
    new_test('message', exts = ['.go_pb', '.script', '.cpp', '.proto', '.mt_pb'])
    new_test('props')
    new_test('reload', exts = ['.go_pb', '.script', '.cpp', '.proto', '.rt_pb'])
    new_test('script')
