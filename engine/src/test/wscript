import Task, TaskGen
from TaskGen import extension, declare_extension
import os, sys, shutil, glob
import waf_gamesys

def build(bld):
    obj = bld.new_task_gen(
        features = 'cc cxx cprogram',
        uselib = 'GTEST GAMEOBJECT DDF RESOURCE GAMESYS GRAPHICS_NULL GRAPHICS_UTIL PHYSICS RENDER PLATFORM_SOCKET LUA SCRIPT HID_NULL INPUT PARTICLE GUI SOUND_NULL DLIB',
        uselib_local = 'engine',
        includes = '../build ../proto .',
        #NOTE: _XBOX to get static lib and avoid dllimport/dllexport stuff
        defines = '_XBOX',
        proto_gen_py = True,
        protoc_includes = '../proto',
        target = 'test_engine')
    builtins_src = "content/builtins"
    builtins_dst = "src/test/builtins"
    if os.path.isdir(builtins_dst):
        shutil.rmtree(builtins_dst)
    shutil.copytree(builtins_src, builtins_dst)
    content_source_dirs = ['.']
    cwd = os.getcwd()
    os.chdir('src/test')
    for top_file in glob.glob('*'):
        if os.path.isdir(top_file):
            content_source_dirs.append(top_file)
            for root, dirs, files in os.walk(top_file):
                for d in dirs:
                    content_source_dirs.append(os.path.join(root, d))
    os.chdir(cwd)
    obj.find_sources_in_dirs(' '.join(content_source_dirs))
    obj.install_path = None
