Scripting & Debugging
=====================

There are three types of scripts in Defold:

* logic scripts (.script)
* gui scripts (.guiscript)
* render scripts (.renderscript)

All types are based on the link:http://www.lua.org/[Lua] scripting language.
We have extended Lua with Defold-specific functions, check the link:/ref[reference] for a list of what's available.

Auto-Completion
---------------

To fill out function names, you can use *Ctrl+Space* to bring up a list of the functions matching what you are typing.

.Code completion
image:images/scripting_debugging/completion.png["Code completion"]

Lua Modules
-----------

Lua modules can be included using the require statement in lua. The module-name should be the absolute path
to the script from the root of your project. Path elements are separated with the period character.

Example
~~~~~~~

[source-code, lua]
----
-- main-script in spaceship/spaceship.script
-- Load the utils.player module. The corresponding file is /utils/player.lua
require "utils.player"
----

Lua modules can be reloaded similar to regular scripts.
More about lua modules can be found here link:http://lua-users.org/wiki/ModulesTutorial[Modules Tutorial].

We recommend not using the module(...) statement in lua. With the module(...) statement the module will start from an empty environment
without the regular functions such as print, etc. Instead of the module statement we recommend qualified names, e.g.
names separated by underscore, or manually created modules with tables.

Example
~~~~~~~
----
-- qualified name example
function utils_move_player(self)
    -- ...
end

-- manually created module
local M = {}
local function move_player(self)
    -- ...
end
M.move_player = move_player
utils = M

-- The move_player function is now accessible with
utils.move_player()

----



NOTE: Modules are currently only supported for game-object-script and not for gui- and render-scripts


Debugging
---------

The simplest way to debug your game in Defold is to use link:http://en.wikipedia.org/wiki/Debugging#Techniques[print debugging].
The technique is basically to print out the values of different variables while the game is running.
If a game object without a script acts weird, you can just attach a script to it with the sole purpose of debugging.

By using the Lua +print+ function, you can print to the Console view in the Editor.
If you rather have the text appear on screen you can post the link:/ref/render#draw_text[+draw_text+] message to the +@render+ socket:

[source-code, lua]
----
msg.post("@render:", "draw_text", {text = "My value: " .. my_val, position = vmath.vector3(200, 200, 0)})
----

When you have problems with spatial calculations, like movement and physics, you can also draw lines on the screen by posting the link:/ref/render#draw_line[+draw_line+] message to the +@render+ socket:

[source-code, lua]
----
msg.post("@render:", "draw_line", {start_point = my_start, end_point = my_end, color = my_color})
----

Whenever the need arises we will add tool-support for debugging the scripts with breakpoints and all those fancy things too.
Do you want it? Then tell us using the feedback-link to the left. :)
