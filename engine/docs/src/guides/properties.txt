Defold Properties - Access and Animation
========================================

In Defold, there are different sets of properties:

* Game object transforms: _position_, _rotation_, _scale_ and _euler_
* Script properties defined in logic scripts
* Shader constants defined in shaders and material files
* System defined component properties, such as the width of a sprite
* Properties of gui nodes (which won't be covered in this guide)

The first three can be accessed from logic scripts through link:/ref/go#get[go.get] and link:/ref/go#set[go.set], as well as animated through link:/ref/go#animate[go.animate].
We will add support for system defined component properties at a later time (let us know if you need any such properties to be exposed).

Animating properties through this system is highly recommended over doing it manually inside the update functions of scripts, both for performance and convenience reasons.

Identifying Properties
----------------------

All of the functions mentioned above takes a reference as their first parameter and a property-id as their second.
The reference identifies the game object or component and can be a string, hash or URL.
URLs are explained more in the link:/doc/message_passing[message passing guide].
The property id is a string or hash that names the property, e.g. "position" to identify the game object position.

Composite properties of type vector3, vector4 or quaternion also expose their sub-elements.
To set only the x-component of a game objects position, you would identify it as "position.x".

Animating Properties
--------------------

All numeric properties (numbers, vector3, vector4 and quaterions) can be animated in our animation system, using the function go.animate.
To stop all animations of a given property, call go.cancel_animations.
If you cancel the animations of a composite property, e.g. "position", it would cancel all animations of the sub-elements as well.

Playback Modes
~~~~~~~~~~~~~~

There are two kinds of playback modes, once and looping.

* go.PLAYBACK_NONE
* go.PLAYBACK_ONCE_FORWARD
* go.PLAYBACK_ONCE_BACKWARD
* go.PLAYBACK_LOOP_FORWARD
* go.PLAYBACK_LOOP_BACKWARD
* go.PLAYBACK_LOOP_PINGPONG

The pingpong mode is special in that it alternates between forward and backward.

Callbacks
~~~~~~~~~

If you supply a lua-function as the last argument of go.animate, that function will be called when the animation has played to the end.
It is never called for looping animations nor when an animation is manually canceled through go.cancel_animations.
It can be used to sequence together a string of animations by starting the next animation in line, or any other thing like changing the state of the script, playing a sound etc.

Easing
~~~~~~

Easing defines how the animated value changes over time.
The images below describe how each type of easing affects the value over time.
The corresponding values to use in scripts are go.EASING_LINEAR, go.EASING_INBACK, etc.

((((
image::images/properties/easing/linear.png["Linear interpolation", float="left"]
unfloat::[]
image::images/properties/easing/inback.png["In back", float="left"]
image::images/properties/easing/outback.png["Out back", float="left"]
image::images/properties/easing/inoutback.png["In-out back", float="left"]
image::images/properties/easing/outinback.png["Out-in back", float="left"]
unfloat::[]
image::images/properties/easing/inbounce.png["In bounce", float="left"]
image::images/properties/easing/outbounce.png["Out bounce", float="left"]
image::images/properties/easing/inoutbounce.png["In-out bounce", float="left"]
image::images/properties/easing/outinbounce.png["Out-in bounce", float="left"]
unfloat::[]
image::images/properties/easing/inelastic.png["In elastic", float="left"]
image::images/properties/easing/outelastic.png["Out elastic", float="left"]
image::images/properties/easing/inoutelastic.png["In-out elastic", float="left"]
image::images/properties/easing/outinelastic.png["Out-in elastic", float="left"]
unfloat::[]
image::images/properties/easing/insine.png["In sine", float="left"]
image::images/properties/easing/outsine.png["Out sine", float="left"]
image::images/properties/easing/inoutsine.png["In-out sine", float="left"]
image::images/properties/easing/outinsine.png["Out-in sine", float="left"]
unfloat::[]
image::images/properties/easing/inexpo.png["In exponential", float="left"]
image::images/properties/easing/outexpo.png["Out exponential", float="left"]
image::images/properties/easing/inoutexpo.png["In-out exponential", float="left"]
image::images/properties/easing/outinexpo.png["Out-in exponential", float="left"]
unfloat::[]
image::images/properties/easing/incirc.png["In circlic", float="left"]
image::images/properties/easing/outcirc.png["Out circlic", float="left"]
image::images/properties/easing/inoutcirc.png["In-out circlic", float="left"]
image::images/properties/easing/outincirc.png["Out-in circlic", float="left"]
unfloat::[]
image::images/properties/easing/inquad.png["In quadratic", float="left"]
image::images/properties/easing/outquad.png["Out quadratic", float="left"]
image::images/properties/easing/inoutquad.png["In-out quadratic", float="left"]
image::images/properties/easing/outinquad.png["Out-in quadratic", float="left"]
unfloat::[]
image::images/properties/easing/incubic.png["In cubic", float="left"]
image::images/properties/easing/outcubic.png["Out cubic", float="left"]
image::images/properties/easing/inoutcubic.png["In-out cubic", float="left"]
image::images/properties/easing/outincubic.png["Out-in cubic", float="left"]
unfloat::[]
image::images/properties/easing/inquart.png["In quartic", float="left"]
image::images/properties/easing/outquart.png["Out quartic", float="left"]
image::images/properties/easing/inoutquart.png["In-out quartic", float="left"]
image::images/properties/easing/outinquart.png["Out-in quartic", float="left"]
unfloat::[]
image::images/properties/easing/inquint.png["In quintic", float="left"]
image::images/properties/easing/outquint.png["Out quintic", float="left"]
image::images/properties/easing/inoutquint.png["In-out quintic", float="left"]
image::images/properties/easing/outinquint.png["Out-in quintic", float="left"]
unfloat::[]
((((
