package dmGameSystemDDF;

import "ddf/ddf_extensions.proto";
import "ddf/ddf_math.proto";

option java_package = "com.dynamo.gamesystem.proto";
option java_outer_classname = "GameSystem";

message SpawnPointDesc
{
    required string prototype = 1 [(resource)=true];
}

message Spawn
{
    required dmMath.Point3  position = 1;
    required dmMath.Quat    rotation = 2;
    optional uint64         id       = 3 [default=0];
}

message CollectionProxyDesc
{
    required string collection = 1 [(resource)=true];
}

enum TimeStepMode
{
    TIME_STEP_MODE_CONTINUOUS   = 0;
    TIME_STEP_MODE_DISCRETE     = 1;
}

/*# sets the time-step for update
 * <p>
 * Post this message to a collection-proxy-component to modify the time-step used when updating the collection controlled by the proxy.
 * The time-step is modified by a scaling <code>factor</code> and can be incremented either continuously or in discrete steps.
 * </p>
 * <p>
 * The continuous mode can be used for slow-motion or fast-forward effects.
 * </p>
 * <p>
 * The discrete mode is only useful when scaling the time-step to pass slower than real time (<code>factor</code> is below 1).
 * The time-step will then be set to 0 for as many frames as the scaling demands and then take on the full real-time-step for one frame,
 * to simulate pulses. E.g. if <code>factor</code> is set to <code>0.1</code> the time-step would be 0 for 9 frames, then be 1/60 for one
 * frame, 0 for 9 frames, and so on. The result in practice is that the game looks like it's updated at a much lower frequency than 60 Hz,
 * which can be useful for debugging when each frame needs to be inspected.
 * </p>
 *
 * @message
 * @name set_time_step
 * @param factor time-step scaling factor (number)
 * @param mode time-step mode: 0 for continuous and 1 for discrete (number)
 * @examples
 * <p>The examples assumes the script belongs to an instance with a collection-proxy-component with id "proxy".</p>
 * Update the collection twice as fast:
 * <pre>
 * msg.post("#proxy", "set_time_step", {factor = 2, mode = 0})
 * </pre>
 * Update the collection twice as slow:
 * <pre>
 * msg.post("#proxy", "set_time_step", {factor = 0.5, mode = 0})
 * </pre>
 * Simulate 1 FPS for the collection:
 * <pre>
 * msg.post("#proxy", "set_time_step", {factor = 1/60, mode = 1})
 * </pre>
 */
message SetTimeStep
{
    required float          factor  = 1;
    required TimeStepMode   mode    = 2;
}

enum LightType
{
    POINT   = 0;
    SPOT    = 1;
}

message LightDesc
{
    required string         id              = 1;
    required LightType      type            = 2;
    required float          intensity       = 3;
    required dmMath.Vector3 color           = 4;
    required float          range           = 5;
    required float          decay           = 6;
    // Only applicable for spot-lights
    optional float          cone_angle      = 7;
    optional float          penumbra_angle  = 8;
    optional float          drop_off        = 9;
}

message SetLight
{
    required dmMath.Point3  position    = 1;
    required dmMath.Quat    rotation    = 2;
    required LightDesc      light       = 3;
}

message SetViewProjection
{
    required uint64         id          = 1;
    required dmMath.Matrix4 view        = 2;
    required dmMath.Matrix4 projection  = 3;
}

/*# plays a sound
 * Post this message to a sound-component to make it play its sound.
 *
 * @message
 * @name play_sound
 * @param [delay] delay in seconds before the sound starts playing, default is 0 (number)
 * @examples
 * Assuming the script belongs to an instance with a sound-component with id "sound", this will make the component play its sound after 1 second:
 * <pre>
 * msg.post("#sound", "play_sound", {delay = 1})
 * </pre>
 */
message PlaySound
{
    optional float delay = 1 [default=0.0];
}
