package dmPhysicsDDF;

import "ddf/ddf_extensions.proto";
import "ddf/ddf_math.proto";

option java_package = "com.dynamo.physics.proto";
option java_outer_classname = "Physics";

message ConvexShape
{
    enum Type
    {
        TYPE_SPHERE = 1;
        TYPE_BOX = 2;
        TYPE_CAPSULE = 3;
        TYPE_HULL = 4;
    }

    required Type shape_type = 1;

    /*
     ShapeType == SPHERE
     Data = [radius]

     ShapeType == BOX
     Data = [ext_x, ext_y, ext_z]

     ShapeType == CAPSULE
     Data = [radius, height]

     ShapeType == HULL
     Data = [x0, y0, z0, x1, ...]
    */
    repeated float data = 2;
}

/* This should coincide with CollisionObjectType in physics-lib */
enum CollisionObjectType
{
    COLLISION_OBJECT_TYPE_DYNAMIC = 0;
    COLLISION_OBJECT_TYPE_KINEMATIC = 1;
    COLLISION_OBJECT_TYPE_STATIC = 2;
    COLLISION_OBJECT_TYPE_TRIGGER = 3;
}

message CollisionObjectDesc
{
    required string                 collision_shape = 1 [(resource)=true];
    required CollisionObjectType    type            = 2;
    required float                  mass            = 3;
    required float                  friction        = 4;
    required float                  restitution     = 5;
    required uint32                 group           = 6;
    repeated uint32                 mask            = 7;
}

message ApplyForceMessage
{
    required dmMath.Vector3 force       = 1;
    required dmMath.Point3  position    = 2;
}

message CollisionMessage
{
    required uint64 other_game_object_id    = 1;
    required uint32 group                   = 2;
}

message ContactPointMessage
{
    required dmMath.Point3  position                = 1;
    required dmMath.Vector3 normal                  = 2;
    required dmMath.Vector3 relative_velocity       = 3;
    required float          distance                = 4;
    required float          applied_impulse         = 5;
    required float          life_time               = 6;
    required float          mass                    = 7;
    required float          other_mass              = 8;
    required uint64         other_game_object_id    = 9;
    required dmMath.Point3  other_position          = 10;
    required uint32         group                   = 11;
}

message RayCastRequest
{
    required dmMath.Point3  from = 1;
    required dmMath.Point3  to = 2;
    required uint32         mask = 3;
}

message RayCastResponse
{
    required float          fraction        = 1;
    required dmMath.Point3  position        = 2;
    required dmMath.Vector3 normal          = 3;
    required uint64         game_object_id  = 4;
    required uint32         group           = 5;
}

message VelocityRequest {}

message VelocityResponse
{
    required dmMath.Vector3 linear_velocity     = 1;
    required dmMath.Vector3 angular_velocity    = 2;
}
